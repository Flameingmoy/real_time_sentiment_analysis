# - RTSA Services ----------------------------------------------------------------------
services:
  # Postgres Databases ----------------------------------------------------------------------
  # PostgreSQL Database 1 - Raw Data/Debugging
  psql-raw:
    image: postgres:latest
    container_name: rtsa-pg-raw
    environment:
      - POSTGRES_DB=rtsa_raw
      - POSTGRES_USER=rtsa_user
      - POSTGRES_PASSWORD=rtsa_password
    ports:
      - "5433:5432"
    volumes:
      - vol_pg_raw:/var/lib/postgresql/data
      - ./sql/init-raw-db.sql:/docker-entrypoint-initdb.d/init-raw.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rtsa_user -d rtsa_raw"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Database 2 - Analytics
  psql-analytics:
    image: postgres:latest
    container_name: rtsa-pg-analytics
    environment:
      - POSTGRES_DB=rtsa_analytics
      - POSTGRES_USER=rtsa_user
      - POSTGRES_PASSWORD=rtsa_password
    ports:
      - "5434:5432"
    volumes:
      - vol_pg_analytics:/var/lib/postgresql/data
      - ./sql/init-analytics-db.sql:/docker-entrypoint-initdb.d/init-analytics.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rtsa_user -d rtsa_analytics"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Database 3 - Logging
  psql-logs:
    image: postgres:latest
    container_name: rtsa-pg-logs
    environment:
      - POSTGRES_DB=rtsa_logging
      - POSTGRES_USER=rtsa_user
      - POSTGRES_PASSWORD=rtsa_password
    ports:
      - "5435:5432"
    volumes:
      - vol_pg_logs:/var/lib/postgresql/data
      - ./sql/init-logging-db.sql:/docker-entrypoint-initdb.d/init-logging.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rtsa_user -d rtsa_logging"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message Queue and Cache ----------------------------------------------------------------------
  # Apache Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: rtsa-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Apache Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: rtsa-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis, RedisSearch, RedisInsight
  redis:
    image: redis/redis-stack:latest
    container_name: rtsa-redis
    ports:
      - "6380:6379"
      - "8002:8001"
    volumes:
      - vol_redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Visualization and Monitoring ----------------------------------------------------------------------
  # Grafana
  grafana:
    image: grafana/grafana:main
    container_name: rtsa-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - vol_grafana:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - psql-analytics
      - psql-logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sentiment Analysis ----------------------------------------------------------------------
  # Ollama
  ollama:
    image: ollama/ollama:latest
    container_name: rtsa-ollama
    ports:
      - "11435:11434"
    volumes:
      - vol_ollama:/root/.ollama
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Go Ingestion Service ----------------------------------------------------------------------
  ingestion:
    build:
      context: ./services/ingestion
      dockerfile: Dockerfile
    container_name: rtsa-ingestion-service
    depends_on:
      kafka:
        condition: service_healthy
      psql-raw:
        condition: service_healthy
    ports:
      - "8081:8080"
    environment:
      - KAFKA_BROKER=kafka:29092
      - POSTGRES_HOST=psql-raw
      - POSTGRES_USER=rtsa_user
      - POSTGRES_PASSWORD=rtsa_password
      - POSTGRES_DB=rtsa_raw
      - POSTGRES_PORT=5432
    healthcheck:
      test: ["CMD-SHELL", "go run validate_connections.go"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python Sentiment Analysis Service ----------------------------------------------------------------------
  sentiment-analysis:
    build:
      context: ./services/sentiment-analysis
      dockerfile: Dockerfile
    container_name: rtsa-sentiment-analysis-service
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
      psql-analytics:
        condition: service_healthy
      psql-logs:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      # Kafka, Redis, Ollama config
      - KAFKA_BROKERS=kafka:29092
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_MODEL=granite3.3:2b
      # Database config
      - ANALYTICS_DB_HOST=psql-analytics
      - ANALYTICS_DB_PORT=5432
      - ANALYTICS_DB_NAME=rtsa_analytics
      - ANALYTICS_DB_USER=rtsa_user
      - ANALYTICS_DB_PASSWORD=rtsa_password
      - LOGGING_DB_HOST=psql-logs
      - LOGGING_DB_PORT=5432
      - LOGGING_DB_NAME=rtsa_logging
      - LOGGING_DB_USER=rtsa_user
      - LOGGING_DB_PASSWORD=rtsa_password
    healthcheck:
      test: ["CMD-SHELL", "python validate_connections.py"]
      interval: 30s
      timeout: 10s
      retries: 3

# - RTSA Setup Containers ----------------------------------------------------------------------
  # Kafka Setup Service
  kafka-setup:
    build:
      context: ./services/kafka-setup
      dockerfile: Dockerfile
    container_name: rtsa-kafka-setup
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:29092
    restart: on-failure

  # Ollama Setup Service
  ollama-setup:
    build:
      context: ./services/ollama-setup
      dockerfile: Dockerfile
    container_name: rtsa-ollama-setup
    depends_on:
      ollama:
        condition: service_healthy
    volumes:
      - vol_ollama:/root/.ollama
    environment:
      - OLLAMA_HOST=ollama:11434
      - OLLAMA_MODEL=granite3.3:2b
    restart: on-failure

# - RTSA Volumes ----------------------------------------------------------------------
volumes:
  vol_pg_raw:
  vol_pg_analytics:
  vol_pg_logs:
  vol_redis:
  vol_grafana:
  vol_ollama: